Website Analysis: Charles Mackay Books Technical Issues
Critical CSS Conflict Analysis
The white-on-white text issue affecting shipping information is likely caused by one of these common CSS conflict patterns:

Root Causes Identified
CSS Specificity Conflicts - Multiple stylesheets competing for the same elements 
MDN Web Docs
W3Schools
Theme/Framework Inheritance - Dark/light theme CSS not properly scoped
Cascade Order Issues - CSS loading order causing unintended overrides 
MDN Web Docs
Third-party Plugin Conflicts - E-commerce or payment processor CSS interference
Probable Code Structure Issues
Framework CSS (Bootstrap, Foundation) with global color rules 
MDN Web Docs
E-commerce plugin styles affecting form elements
CSS reset/normalize files overriding intended colors 
MDN Web Docs
Netlify deployment CSS bundling conflicts
Comprehensive Website Issues Framework
Performance Problems:

Unoptimized book cover images
Excessive third-party JavaScript
Missing Core Web Vitals optimization
UX/Conversion Issues:

Navigation complexity affecting book discovery
Missing trust signals and social proof
Suboptimal call-to-action placement
Checkout flow friction points
Technical Validation Needs:

HTML/CSS validation errors 
w3 +5
Accessibility violations (WCAG compliance) 
accessibilitychecker +2
Security headers and SSL configuration 
ssllabs
SEO metadata and structured data issues 
Contentful
Cursor AI Fix Prompts
Execute these prompts from C:\Users\Gus\Desktop\Charlesmackaybooks\Charlesmackaybooks:

1. Fix White-on-White Text Issues
Analyze all CSS files in the project and fix white-on-white text issues in shipping information sections. Search for CSS rules affecting shipping elements with selectors containing 'shipping', 'royal-mail', 'book-weight', or form elements. Identify conflicts where text color and background color are both white or similar.  Add specific CSS rules with appropriate specificity to ensure shipping information text is always visible with dark text (#333333) on light/transparent backgrounds.  Create defensive CSS that prevents theme colors from affecting form readability. Generate a shipping-fix.css file with targeted fixes and include it in the HTML head sections.
2. Comprehensive CSS Conflict Resolution
Examine the entire CSS architecture in the project to identify and resolve cascade conflicts. Look for multiple CSS files targeting the same elements, !important declarations, and specificity wars.  Implement a CSS methodology using BEM naming conventions or component-based organization.  Create a new organized CSS structure with: base.css (resets/defaults), layout.css (major sections), components.css (reusable elements), and utilities.css (helper classes).  Ensure proper CSS loading order in HTML files and add CSS custom properties for consistent theming.  Fix any inheritance issues that might cause text visibility problems.
3. Performance Optimization
Optimize website performance for Core Web Vitals compliance. Analyze all images in the project and convert large book cover images to WebP format with appropriate sizing and lazy loading.  Minify and compress CSS and JavaScript files. Implement critical CSS inlining for above-the-fold content. Add proper image alt attributes and optimize loading performance. Create responsive image sets with srcset attributes for different screen sizes. Remove unused CSS and JavaScript. Add performance-focused meta tags and implement proper caching headers configuration for static assets.
4. HTML Structure and Validation Fixes
Review and fix HTML validation errors throughout the project. Ensure proper semantic HTML5 structure with correct heading hierarchy (H1-H6).  Add missing required attributes like alt text for images, lang attributes, and proper form labeling. Fix any deprecated HTML elements or invalid nesting.  Ensure all form elements have proper labels and accessibility attributes. Add structured data markup (Schema.org) for books, author information, and reviews. Validate and fix document structure, meta tags, and ensure W3C compliance across all pages. 
5. Accessibility and WCAG Compliance
Implement comprehensive accessibility improvements to meet WCAG 2.1 AA standards.  Fix color contrast issues by ensuring all text meets minimum contrast ratios  (4.5:1 for normal text, 3:1 for large text).  Add proper ARIA labels and roles for interactive elements. Implement keyboard navigation support for all functionality. Ensure form elements have proper labels and error messaging. Add skip navigation links and landmark roles for screen readers. Test and fix focus management throughout the site. Create an accessible color palette and ensure no information is conveyed through color alone. 
6. Mobile Responsiveness Optimization
Optimize the website for mobile devices with responsive design improvements.  Ensure all touch targets are minimum 48px in size.  Fix any horizontal scrolling issues and ensure proper viewport configuration.  Implement flexible grid systems that adapt to all screen sizes. Optimize typography for mobile readability with appropriate font sizes (minimum 16px).  Test and fix navigation on small screens with collapsible menus. Ensure book cover images and layouts work properly on mobile devices. Add proper mobile meta tags and optimize touch interactions for book purchasing flows.
7. SEO and Meta Data Enhancement
Implement comprehensive SEO improvements across all pages.  Add unique, descriptive title tags (50-60 characters) and meta descriptions (150-160 characters) for each page. Create proper heading structure with one H1 per page and logical H2-H6 hierarchy. Implement internal linking strategy between book pages and author information. Add Open Graph and Twitter Card meta tags for social sharing. Create and optimize robots.txt and XML sitemap files.  Add canonical URLs to prevent duplicate content. Implement breadcrumb navigation and optimize URL structure for books and categories.
8. Security and Technical Headers
Implement security best practices and proper HTTP headers. Ensure all pages use HTTPS and add security headers like Content-Security-Policy, X-Frame-Options, X-Content-Type-Options, and Strict-Transport-Security.  Review and secure any form submissions with proper validation and CSRF protection. Add proper error handling that doesn't expose sensitive information. Implement rate limiting for contact forms if applicable. Ensure any user input is properly sanitized. Add privacy policy and cookie consent functionality if needed. Review third-party integrations for security compliance.
9. Conversion Rate Optimization
Optimize the website for better book sales conversion. Improve call-to-action buttons with compelling text, proper sizing, and strategic placement.  Add multiple purchase options (Amazon, direct sales, etc.) prominently on book pages. Implement social proof elements like reader reviews, ratings, and testimonials. Create urgency with limited-time offers or stock indicators if appropriate. Optimize the checkout process for reduced friction and cart abandonment.  Add trust signals like security badges, return policy information, and author credentials. Implement email capture with book previews or exclusive content offers.
10. Asset and Image Optimization
Comprehensively optimize all website assets for performance and quality. Convert all images to appropriate formats (WebP for photos, SVG for logos/icons). Implement responsive images with proper srcset attributes. Compress and optimize all existing images without quality loss. Create a consistent image optimization workflow. Minimize CSS and JavaScript files and remove unused code. Implement proper image lazy loading for book covers and gallery images. Add proper image dimensions to prevent layout shift. Optimize favicon and app icons for all devices and platforms.
Priority Execution Order
Immediate (Critical Issues):

Execute Prompt #1 (White-on-White Text Fix)
Execute Prompt #2 (CSS Conflict Resolution)
High Priority: 3. Execute Prompt #4 (HTML Validation) 4. Execute Prompt #5 (Accessibility) 5. Execute Prompt #3 (Performance)

Medium Priority: 6. Execute Prompt #6 (Mobile Responsiveness) 7. Execute Prompt #7 (SEO Enhancement) 8. Execute Prompt #8 (Security Headers)

Enhancement Phase: 9. Execute Prompt #9 (Conversion Optimization) 10. Execute Prompt #10 (Asset Optimization)

Each prompt is designed to be executed independently by Cursor AI and will create measurable improvements in website functionality, user experience, and technical compliance. 
WebAIM +2

